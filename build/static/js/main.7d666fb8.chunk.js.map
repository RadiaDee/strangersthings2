{"version":3,"sources":["api/index.js","component/Login.jsx","component/Posts.jsx","component/SinglePost.jsx","component/NewPosts.jsx","component/Search.jsx","component/UserProfile.jsx","component/Messages.jsx","index.js"],"names":["baseURL","cohortName","fetchPosts","token","a","fetch","method","headers","response","json","result","data","posts","console","error","registerUser","username","password","confirmPassword","alert","body","JSON","stringify","user","loginUser","log","localStorage","setItem","userData","createPost","title","location","description","price","deliver","post","willDeliver","createMessage","content","id","message","Error","Login","history","match","setToken","useState","setPassword","setUsername","setConfirmPassword","onSubmit","event","preventDefault","url","push","className","type","value","placeholder","required","onChange","target","onClick","removeItem","to","Posts","setPosts","storedPosts","setSelectedPost","useEffect","results","map","index","_id","SinglePost","selectedPost","useParams","postId","foundPost","find","postElement","NewPosts","setTitle","setPrice","setDescription","setLocation","setDeliver","placeHolder","Search","searchValue","setSearchValue","filteredPosts","filter","toLowerCase","includes","UserProfile","userPosts","setUserPosts","userMessages","setUserMessages","messages","author","fromUser","Messages","setMessage","useHistory","newMessage","App","setStoredPosts","isLoggedIn","storedToken","getItem","exact","path","render","routeProps","Message","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.7d666fb8.chunk.js","sourcesContent":["// ALL FETCH CALLS HERE=======================================================================\n// ===========================================================================================\n// ============================= API KEYS ============================\nexport const baseURL = 'https://strangers-things.herokuapp.com/api';\nexport const cohortName = '2107-CSU-RM-WEB-PT';\n\n\n// ================ GET & RETURN POSTS =================================\n\n\nexport async function fetchPosts(token) {\n    try{              \n\n        if(token){      // if token we get more info\n                        // if no token then we just get all posts\n            const response = await fetch(`${baseURL}/${cohortName}/posts`,\n                {   method: 'GET',\n                    headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}`,\n                    }\n                });     // end of fetch call, grab the post info with await\n\n            const result = await response.json();\n            return result.data.posts;   // return the posts\n            }\n\n        else{\n            const response = await fetch(`${baseURL}/${cohortName}/posts`,\n                {   method: 'GET',\n                    headers: {\n                    'Content-Type': 'application/json',\n                    }\n                });     // grab the info with await\n            const result = await response.json();\n            return result.data.posts;\n            }\n        }   \n    \n    catch (error){      // error handle\n    console.error(error); \n    }\n\n} \n\n// =============== USER END POINTS ==============================================================\n//===============================================================================================\n// ================== REGSTER USER & RETURN TOKEN =====================\n\n  export async function registerUser(username, password, confirmPassword){\n    try{\n        \n        if (confirmPassword!==password) {      // see if passwords match  \n            alert(\"Your passwords dont match, Please try again\");\n            return;  // no registration if dont match\n            };\n            \n        const response = await fetch(`${baseURL}/${cohortName}/users/register`,   \n            {    // second parameter\n                method: \"POST\",\n                headers: { \n                    'Content-Type': 'application/json'\n                },\n\n                body: JSON.stringify({\n                    user: {\n                    username: username,\n                    password: password\n                    }\n                })\n\n            })       // end fetch call\n\n        const result = await response.json();\n        const token = result.data.token;     // gives us token after user submits info\n        return token;\n          // localStorage.setItem('token',token);   // maybe remove this? this saves the users token\n    }\n\n    catch (error){      // error handle\n    console.error(error);    \n    }\n}\n\n// =========== LOGIN USER & SAVE TOEKN =============================\n\nexport async function loginUser(username, password){\n    // this gives us toekn\n    try{\n            \n        if (!username || !password) {       // check username passwords match\n            alert(\"Please enter username and password\");\n            };\n\n        const response = await fetch(`${baseURL}/${cohortName}/users/login`,   // second parameter to fetch next\n            {    // second parameter\n                method: \"POST\",\n                headers: { 'Content-Type': 'application/json'\n                },\n                    \n                body: JSON.stringify({\n                    user: {\n                    username: username,\n                    password: password\n                    }\n                })\n\n            })    // end fetch call\n            \n        const result = await response.json();\n        const token = result.data.token;\n            \n        console.log(\"this is the token \" + token)\n        localStorage.setItem(\"token\", token);     // stores it on the personal computer\n        return token;\n        \n    }\n\n    catch (error){      // error handle\n    console.error(error);    \n    }\n}\n\n// ==v======= HEADERS, USED FOR REQUESTS BY REGISTERED USERS ========== DOES THIS WORK???\n// gives us more information about that user, so we can display their name, messages ect\n// which one should I use and where?\n// nevermind I hard coded headers\n\n// export function makeHeaders(token){\n//     let headers = {};\n//     if(token){\n//         headers = {\n//             'Content-Type': 'application/json',\n//             'Authorization': `Bearer ${token}`\n//             }\n//         }\n//         else {\n//             headers= {\n//             'Content-Type': 'application/json'\n//             }\n//         }\n//     }\n\n\n// pass in method: 'POST'\n// header: makeHeaders(token),\n\n// ===v========= GRAB USER DATA ??? AUTHORIZATION =============\n\n// export const makeHeaders = async (token) => {\n\n// //if(token){} .     // ???\n\n// // this obtains the user data  posts and messages\n// // when user is logged in we want these headers of the api data\n// // if user is not logged in, we dont need them\n// // headers with token go to API to determine the user\n//     try {\n//         const response =await fetch (`${baseURL}/${cohortName}/users/me`, {\n\n\n//     // the header is a header for the api call, leading information about the data going to the api\n//             headers: {\n//             'Content-Type': 'application/json',\n//             'Authorization': `Bearer ${token}`\n//             }\n//         })\n//         const result = await response.json();\n\n//         // return result look at api, the users data/ messages\n//     }\n\n//     catch (error){      // this takes in the error\n//     console.error(error);    // display the error\n// }\n\n// //return headers;     // . ????\n// }\n\n\n// ======== USER DATA shows us the users posts and messages ===================\n\nexport const userData = async ( token ) => {\n\n    try{\n\n        const response = await fetch(`${baseURL}/${cohortName}/users/me`,\n            {\n                headers: { 'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}`\n                },\n            }) // end fetch\n\n        const result = await response.json();\n        console.log(result);\n        return result;       // is this what we return? vs result\n    }\n\n    catch (error){\n    console.error(error);\n    }\n\n}\n\n\n// ================== POSTS MANIPULATION CREATE, EDIT, DELETE =====================================\n//==================================================================================================\n\n// ====================== CREATE POST & RETURN DATA? ===========\n\nexport const createPost = async (token, title, location, description, price, deliver) => {\n\n    try{\n        const response = await fetch(`${baseURL}/${cohortName}/posts`,\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}`\n                    },\n                body: JSON.stringify({\n                    post:{\n                    title: title,\n                    description: description,\n                    price: price,\n                    location:location,\n                    willDeliver: deliver,\n                    }\n                })\n            }) // end of fetch call\n\n        const result = await response.json();\n        //return result;\n        console.log(\"my result is\", result);\n        // return result.data.post;             ?????????????????\n    }\n\n    catch (error){      // handles error\n    console.error(error);    // display the error\n\n    }\n\n}\n\n\n\n// ============== DELETE USERS POST ==============================\n\nexport const deletePost = async (token, POST_ID ) => {\n    try{\n        \n        const response = await fetch(`${baseURL}/${cohortName}/posts/` + POST_ID,\n            {\n                method: \"DELETE\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}`,\n                },\n            })   // end fetch call\n\n        const result =await response.json();\n        // no need to return, only deleting the post\n               \n    }\n\n    catch (error){\n    console.error(error);\n    }\n\n}\n\n\n//====extra credit======== EDIT POST THAT MATCHES ID ================= POST_ID or _id================\n\n\nexport const editPost = async (title, description, price, location, deliver, token, POST_ID) => {\n    try{\n\n        const response = await fetch(`${baseURL}/${cohortName}/posts/5e8d1bd48829fb0017d2233b`+ POST_ID, \n            {\n                method: \"PATCH\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}`,\n                },\n                body: JSON.stringify({\n                    post: {\n                    title: title,    // change to variable title\n                    description: description,\n                    price: price,\n                    location: location,\n                    willDeliver: deliver,\n                    }\n                })\n            })    // end of fetch call\n\n//   .then(response => response.json())\n//   .then(result => {\n//    console.log(result);\n\n        const result = await response.json();\n        return result.data.post;\n    }\n\n    catch (error){      // handles error\n    console.error(error);\n    }\n}\n\n// =================== CREATE A NEW MESSAGE AND STORE TO API =============\n\nexport const createMessage = async (token, content) => {\n    try{\n\n        const response = await fetch(`${baseURL}/${cohortName}/posts/${id}/messages`,\n            {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer' + token\n                },\n                body: JSON.stringify({\n                    message: {\n                    content: content,\n                    }\n                })\n        }) // end fetch call\n        const result = await response.json();\n        // const id = result.data.message._id;   // maybe not needed?\n        console.log(result);\n        if (!id){throw new Error(\"error sending message\")};\n        return result;      // populate message\n    }\n    catch (error){\n    console.error(error);\n    }\n}\n\n// ================ helpers function =================================\n\n// ================ find post with Id when clicked on =======================================\n\nexport function findPostById(postId, arrayOfPosts) {\n\n    const myPost = arrayOfPosts.find( (postElement) => {\n        return postElement._id === postId;\n    } );   // return the post element with id that matched the id cliced on\n\n    if (!myPost) return {}\n        else return myPost;\n    //return myPost || {};   // ?? if the post is undef make an empty object\n}\n\n    \n\n","import React, { useState } from 'react';   // just need regular react, react dom is for rendering\nimport { Link } from 'react-router-dom';\nimport {registerUser, loginUser } from '../api';\n\n// ================== LOGIN AND REGISTER =====================\n\nconst Login = ({ history, match, setToken }) => {    \n    \n// ---------------------- varbiables being used ----------------------\n    const [password, setPassword] = useState(\"\");\n    const [username, setUsername] = useState(\"\");\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\n\n// ================== LOGIN AND REGISTER FORM ======================\n    return (\n        <div id=\"login\">\n              {/*rendering*/}\n            \n\n    {/** start input form */}        \n            <form onSubmit={ async (event) => {         \n                event.preventDefault();    // onsubmit usually it will go to a new page, this prevents that\n\n                if (match.url === \"/register\"){ // if we are on register url\n                    const token = await registerUser(username,password, confirmPassword);    // register user w api\n                    setToken(token);              // update token\n                    history.push(\"/posts\");     // send user to posts\n                }\n\n                if (match.url === \"/login\"){    // if we are on login url\n                    const token = await loginUser(username, password);    // login user w api\n                    setToken(token);               // update token\n                    history.push(\"/posts\");      // send user to posts\n                }\n\n                } } >       \n\n    {/** INPUT BOX USERNAME */}\n                    <div>\n                        <label className=\"form-label\">Username</label>\n                            <input \n                            type=\"text\" \n                            value={username} \n                            placeholder =\"your username\" \n                            required\n                            onChange = { (event)=> \n                            { setUsername(event.target.value) } } />\n                    </div>\n\n    {/** INPUT BOX PASSWORD */}\n                    <div>\n                        <label className=\"form-label\">Password</label>\n                        <input \n                            type=\"text\" \n                            value={password} \n                            placeholder=\"\"\n                            required \n                            onChange = { (event)=> \n                            { setPassword(event.target.value) } } />\n                    </div>\n\n    {/** INPUT BOX CONFIRM PASSWORD */}\n    {/**ternary if the url is register then show confirm password input */}\n\n                    {match.url === \"/register\" ?\n                    (<div>\n                        <label className=\"form-label\">Confirm password</label>\n                        <input \n                            type=\"text\" \n                            value={confirmPassword} \n                            placeholder=\"\" \n                            required\n                            onChange = { (event)=> \n                            { setConfirmPassword(event.target.value) } } />\n                    </div>) : null}\n    {/**buttons submit / logout */}                \n                \n                <button type=\"submit\"     // this connects button to onsubmit event handler\n                    className=\"submitButton\">\n                    Submit</button>\n\n                <button onClick={ ()=> {\n                    localStorage.removeItem(\"token\");\n                    setToken(null);\n                    history.push(\"/login\");\n                } }\n                >Log Out</button>\n\n    {/**Links for login or register */}\n                            \n                {match.url === \"/register\" ?\n                    <Link to=\"/login\">Already have an account?</Link>\n                    : <Link to=\"/register\">Dont have an account? </Link>\n                    }\n\n                {/* {isLoggedIn ?\n                <Messages/>             // import message comp and isLoggedIn\n                : null\n                } */}\n\n\n    {/**end form */}\n            </form>\n        </div>\n    )\n\n}\n\nexport default Login;\n","import React, {useState, useEffect} from 'react';   // just need regular react, react dom is for rendering\nimport { fetchPosts, createPost, createMessage } from '../api';\nimport {Search, Messages} from \"../component\";\nimport { findPostById } from '../api';\n\n// ===================== RENDER POSTS ====================================\n\nconst Posts = ( {posts, token, setPosts, history, setSelectedPost, storedPosts}) => {\n\n    // const posts = props.posts;     // array of posts in root app\n    // const token = props.token;      // user token\n    // const setPosts = props.setPosts;\n\n// ---------------- useEffect api function grabs posts ---------------------------------\n    useEffect(         // may not need this bc its in root app\n        async ()=> {                  \n        const results = await fetchPosts();     \n        setPosts( results );                 //  update state with posts\n    }, []);    // use default second parameter array\n\n// =================== POSTS ======================================= WORKS\n    return (\n        <div> \n            <h1>My posts</h1>\n            <p> <button onClick={ ()=> {\n                    localStorage.removeItem(\"token\");\n                    history.push(\"/login\");\n                } }\n                >Log Out</button>   </p>\n                    <Search storedPosts={storedPosts} setPosts={setPosts}/> \n            { posts.map( ( post, index )=>{   // \"map\" each element and display\n                return (\n\n                <div key={post._id}>\n                    \n                    <h2 >{post.title}</h2>\n                    <p >{post.description}</p>\n                    <p >{post.price}</p>\n                    <p> {post.location}</p>\n                    {/* <p> {post.author.username}</p> */}\n                    <p> Will Deliver? (Enter true or false) { post.willDeliver} </p>\n                    <div>{ token? <Messages token={token} /> : null } {/** finish later????? */} </div>\n                   \n                   <button type=\"button\" className=\"btn btn-success\"\n                        onClick ={ () => { \n                            // const myNewSelectedPost = findPostById(post._id, posts);\n                            // setSelectedPost(myNewSelectedPost); // update selected post this is in api\n                            history.push(`/posts/${post._id}`\n                            \n                            );\n                        }}> More information about this item</button> {/** bring us to component with only that item */}\n                </div>\n                )\n            }) }\n        \n        </div>\n    )\n}\n\n\nexport default Posts;\n// import this into App componenet","import React, {useEffect} from 'react';\nimport { findPostById } from '../api';\nimport { useParams } from 'react-router-dom';\nimport {Messages} from './index';\n\nconst SinglePost = ({posts, selectedPost, setSelectedPost, match, history}) => {\n   // what renders this? \n    const {id}= useParams();  // useParams gets id from posts/:id\n    \n    \n    useEffect( () => {\n    //const postId = Number(id);    // no need to coerce into number\n    const foundPost = findPostById(id, posts);    // found post is the new array of posts that are matching the id\n    console.log(foundPost);\n    // update the selectedpost with foundpost\n    setSelectedPost(\n        foundPost)        // update the post to be seen with array of posts\n\n    }, []);\n    \n\n\n    return (<div>\n\n        <button onClick={ ()=> {\n                    localStorage.removeItem(\"token\");\n                    \n                    history.push(\"/\");\n                } }\n                >Log Out</button>\n                \n        <h1>More information on this post</h1>\n        <h1>Title: {selectedPost.title}</h1>\n                <p>Description: {selectedPost.description}</p>\n                <p>Price: {selectedPost.price}</p>\n< Messages />\n    </div>)\n// use match to read url and render that id post\n}\n\nexport default SinglePost;\n\n","import React, {useState} from 'react';   // just need regular react, react dom is for rendering\nimport { fetchPosts, createPost, createMessage } from '../api';\n\nconst NewPosts = ({token, posts, setPosts, history }) => {\n    const [title, setTitle] = useState(\"\");\n    const [price, setPrice] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [location, setLocation] = useState(\"\");\n    const [deliver, setDeliver] = useState(\"\");\n\n    return(\n\n        <form onSubmit={ async (event)=> {\n            event.preventDefault();    // so it doesnt load new page on submit\n            await createPost( token, title, location, description, price, deliver);    // make this async?\n        //     console.log(response);\n            //setPosts(response);     \n        \n            const result = await fetchPosts();\n            setPosts(result); \n            history.push('/posts');    // send them to all the posts?\n        }} >\n{/**do these input boxes go IN THE ONSUBMIT? */}\n        <p>Create a post</p>\n<div>\n        <label>Title</label>\n        <input onChange={(event)=> setTitle(event.target.value) } value={title} type=\"text\" placeHolder=\"title\" required />\n</div>\n<div>\n        <label>Price</label>\n        <input onChange={(event)=> setPrice(event.target.value) } value={price} type=\"text\" placeHolder=\"price\" required />  \n</div>\n<div>\n        <label>Description</label>\n        <input onChange={(event)=> setDescription(event.target.value) } value={description} type=\"text\" placeHolder=\"description\" required />\n</div>\n<div>\n        <label>Location</label>\n        <input onChange={(event)=> setLocation(event.target.value) } value={location} type=\"text\" placeHolder=\"location\" required />\n</div>\n<div>\n        <label>Deliver?</label>\n        <input onChange={(event)=> setDeliver(event.target.value) } value={deliver} type=\"text\" placeHolder=\"deliver\" required />\n</div>\n<div>\n        <button type=\"submit\">Create new post</button>\n</div>\n\n\n        </form>\n    )\n}\n\nexport default NewPosts;","import React from \"react\";\nimport {useState, useEffect} from 'react';\n\n// =========== SEARCH COMPONENT =======================================================\n\nconst Search = ({storedPosts, setPosts}) => {\n    \n    // import storedposts so that these posts are stored somewhere else than \"posts\" as a copy so that posts can still render\n    const [searchValue, setSearchValue] = useState(\"\");   // search value is the text the user types in\n\n\n// ================use Effect when page loads, update list of posts with match search value =========\n    useEffect(        // why not use findpostby id?\n            ()=>{   const filteredPosts = storedPosts.filter(     // storedPosts is a copy with all the posts\n                    ( post )=>{ return post.title.toLowerCase().includes(searchValue.toLowerCase() ) } );   // take post in argument, which is the first element of the array\n                    setPosts(filteredPosts);    // shouldnt we setSelectedPosts to set the copy of posts?\n                        // set the array of posts with the posts that are filtered and match the input value \n                \n                }, [searchValue] // listen for searchValue to update and run useEffect when this updates as well as when page loads\n            );\n\n\n\n    return (\n        <div>\n            <label>Search Posts </label>\n            <input value={searchValue} placeholder=\"search\" onChange ={(event) => setSearchValue(event.target.value) }/>\n\n        </div>\n    )\n\n}\n\nexport default Search;","import React, { useState } from 'react';  \nimport { useEffect } from 'react/cjs/react.development';\nimport { deletePost, userData } from '../api';\n// ======== takes user to their profile page\n\nconst UserProfile = ({token, history}) => {\n\n    // here we use the user posts and render them\n    // we are able to delete posts\n\n\nconst [userPosts, setUserPosts] = useState([]);\nconst [userMessages, setUserMessages] = useState([]); // src index\n\n\nuseEffect( async () =>{\n    \n\n    const result = await userData(token);\n    \n    if (result.data){\n    const posts = result.data.posts;    // get the posts\n    const messages = result.data.messages;  // get messages\n    setUserPosts(posts);\n    setUserMessages(messages);}\n    else return null;\n\n}, []);\n\nreturn (\n\n    <div>\n        <h1> Your posts and messages</h1>\n        \n        <br></br>\n        {userPosts.map ((posts, index) => {\n            \n                <div>\n                    <h2>Your Posts </h2>\n                    <p> {posts.title}</p>\n                    <p>{posts.author}</p>\n                    <p>{posts.location}</p>\n                    <p>{posts.description}</p>\n                    <p>{posts.price}</p>\n                    <p>{posts.willDeliver}</p>\n                    <p></p>\n                    \n                    <button onClick ={\n                        async (event)=>{\n                            response= await deletePost(token, posts._id);\n                            console.log(response);\n                            history.push(\"/posts\");\n                        }\n\n                        \n                    } type=\"submit\" > Delete</button>\n\n\n                    <h2>Your Messages</h2>\n                    <p></p>\n                    {userMessages.map((messages, index) => {\n                        return (\n                            <div>\n                                <h2>Messages</h2>\n                                <p>Message: {messages.post.title}</p>\n                                <p>From: {messages.fromUser.username}</p>\n                                <p>Content: {messages.content}</p>\n                            </div>\n                        )\n\n                    } )}\n\n                </div>\n\n        \n\n\n\n\n        }) }\n    </div>\n)\n\n// state for past posts and username\n// show username, posts, messages\n\n// useeffect awaits fetch call with token gets user data, pass in token\n// pass toekn in second parameter array\n\n// return \n\n// ternary if token, display header for messages, messages, past posts\n\n// map messages \n\n// map past posts\n\n\n\n\n}\n\nexport default UserProfile;","// import\nimport React, {useState} from 'react';\nimport { createMessage } from '../api';\nimport { useHistory } from 'react-router-dom';    // this way or brosewe\n\nconst Messages = (token, content) => {\n\nconst[message, setMessage] = useState(\"\");\nconst history = useHistory();\n\n\n    return(\n    <div>\n\n        <form onSubmit= { async (event) => {\n            event.preventDefault();\n            const response = await createMessage(token, content);\n            const newMessage= response.data.message.content;  //?\n\n            setMessage(newMessage); // update messages array\n            // or setMessage(\"\"); ?\n            // history.push('/posts');  // see if works\n        }\n        }>\n        <h1>Write a message to this seller</h1>\n        <textarea type='text' placeholder=\"type your message here\" value={message}\n        onChange={(event)=> {setMessage(event.target.value) }}/>\n\n        <button> Deliver message</button>\n        </form>\n    </div>\n)\n\n\n\n\n    \n}\n\nexport default Messages;","//============= importing ===============================\nimport React, { useState, useEffect } from 'react';   // usestate here\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Router, Route, Link } from 'react-router-dom';   // for the feature where route /path shows certain components\nimport { Login, Posts, SinglePost, NewPosts, Messages, Search, UserProfile} from './component/';\nimport { fetchPosts } from './api';\n\n// ============== MAIN COMPONENT =============================\nconst App = ( ) => {        \n\n  const [token, setToken] = useState(null);           // token use for registering/ logging in\n  const [posts, setPosts] = useState([]);            // posts from API\n  const [selectedPost, setSelectedPost] = useState({});  // object of singlePost\n  const [storedPosts, setStoredPosts] = useState([]);  // posts displayed during search, copy of posts\n\n// ------------------ variables -----------------\n  const isLoggedIn = !!token;   // if isLoggedIn true, user is registered/logged in\n \n// ----------------- useEffect functions -----------------  \n  \n// render posts in root app\nuseEffect(\n  async ()=> {                  \n  const results = await fetchPosts();    \n  setPosts( results );                 //  update posts with state\n  setStoredPosts(results);       // also copy posts to storedPosts \n}, []);\n\n\nuseEffect(() => {             // run when site loads\n    const storedToken = localStorage.getItem('token'); // check if storedtoken/ user logged in\n    if (storedToken){\n      setToken(storedToken);    // update token from api to \"save\" user info\n      //makeHeaders(storedToken);  // uses headers to authenticate user and grab user data\n    }\n  }, []);                     \n\n// ================ RENDER COMPONENTS =====================================\n\n  return (\n    <BrowserRouter>\n\n    {/* Nav Bar w links */}\n      <div id=\"navBar\">\n        {isLoggedIn ? <Link to=\"/userprofile \" >Profile </Link> : <Link to=\"/login\"> Login </Link>}\n        {isLoggedIn ? <Link to=\"/newposts\" > Make New Post </Link> : null }\n        {/* {isLoggedIn ? <Link \n        onClick= {()=>{\n        localStorage.removeItem(\"token\");\n                    // setToken(null);\n                    // history.push(\"/login\");\n        } }\n        \n        > Log Out </Link> : null } */}\n\n\n        <Link to=\"/register\" > Register </Link>\n        <Link to=\"/posts\" > Posts </Link>\n        \n        \n        <h1> Welcome to posts </h1>\n      </div>\n      \n    {/**paths that are executed will render the corresponding component */}\n      < Route exact path=\"/posts\" render={ ( routeProps ) => <Posts token={token} {...routeProps} posts={posts} setPosts={setPosts} setSelectedPost={setSelectedPost} storedPosts={storedPosts}/>} />\n      < Route exact path=\"/posts/:id\" render={ ( routeProps ) => <SinglePost token={token} {...routeProps} posts={posts} setPosts={setPosts} setSelectedPost={setSelectedPost} selectedPost={selectedPost} />} />\n\n      < Route path=\"/login\" render={ ( routeProps ) => <Login {...routeProps} setToken={setToken} /> }/>\n      < Route path=\"/register\" render={ ( routeProps ) => <Login {...routeProps} setToken={setToken} /> } />\n      \n      < Route path=\"/newposts\" render={ ( routeProps ) => <NewPosts token={token} {...routeProps} posts={posts} setPosts={setPosts}/>} />\n      < Route exact path=\"/userprofile\" render={ ( routeProps ) => <UserProfile token={token} {...routeProps}/>} />\n      < Route path=\"/message\" render={ ( routeProps ) => <Message token={token} posts={posts} {...routeProps}/>} />\n      {/* < Route path=\"/search\" render={ ( routeProps ) => <Search token={token} posts={posts} storedPosts={storedPosts} {...routeProps}/>} /> */}\n    </BrowserRouter>\n  )\n}\n\nReactDOM.render( <App />, document.getElementById('app') );\n"],"sourceRoot":""}